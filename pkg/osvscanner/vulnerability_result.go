package osvscanner

import (
	"strconv"
	"strings"

	"github.com/datadog/datadog-sbom-generator/pkg/lockfile"

	"github.com/datadog/datadog-sbom-generator/internal/utility/fileposition"
	"github.com/datadog/datadog-sbom-generator/internal/utility/location"

	"github.com/datadog/datadog-sbom-generator/pkg/models"
	"github.com/datadog/datadog-sbom-generator/pkg/reporter"
)

func exportMetadata(rawPkg lockfile.PackageDetails) map[models.PackageMetadataType]string {
	metadata := make(map[models.PackageMetadataType]string)

	if len(rawPkg.PackageManager) > 0 && rawPkg.PackageManager != models.Unknown {
		metadata[models.PackageManagerMetadata] = string(rawPkg.PackageManager)
	}
	if rawPkg.IsDirect {
		metadata[models.IsDirectDependencyMetadata] = strconv.FormatBool(rawPkg.IsDirect)
	}
	if rawPkg.Ecosystem.IsDevGroup(rawPkg.DepGroups) {
		metadata[models.IsDevDependencyMetadata] = strconv.FormatBool(true)
	}

	return metadata
}

func packageHasRangedVersion(scannedPackage lockfile.PackageDetails) bool {
	return strings.ContainsAny(scannedPackage.Version, ",><")
}

// grouped by source location.
func groupBySource(r reporter.Reporter, packages []lockfile.PackageDetails, artifacts []models.ScannedArtifact) models.VulnerabilityResults {
	output := models.VulnerabilityResults{
		Results:   []models.PackageSource{},
		Artifacts: artifacts,
	}
	groupedBySource := map[models.SourceInfo][]models.PackageVulns{}

	for _, p := range packages {
		if packageHasRangedVersion(p) {
			continue
		}
		var pkg models.PackageVulns
		switch {
		case p.Ecosystem != "" && p.Name != "":
			pkg = models.PackageVulns{
				Package: models.PackageInfo{
					Name:      p.Name,
					Version:   p.Version,
					Ecosystem: string(p.Ecosystem),
				},
				Metadata: exportMetadata(p),
			}
		case p.Commit != "":
			pkg.Package.Version = p.Commit
			pkg.Package.Ecosystem = "GIT"
		default:
			r.Warnf("package %v does not have a commit, PURL or ecosystem/name/version identifier\n", p)
			continue
		}

		pkg.Vulnerabilities = nil
		if fileposition.IsFilePositionExtractedSuccessfully(p.BlockLocation) {
			pkg.Locations = make([]models.PackageLocations, 1)
			pkg.Locations[0] = location.NewPackageLocations(p.BlockLocation, p.NameLocation, p.VersionLocation)
		} else {
			pkg.Locations = make([]models.PackageLocations, 0)
		}
		groupedBySource[p.Source] = append(groupedBySource[p.Source], pkg)
	}

	for source, packages := range groupedBySource {
		output.Results = append(output.Results, models.PackageSource{
			Source:   source,
			Packages: packages,
		})
	}

	return output
}
