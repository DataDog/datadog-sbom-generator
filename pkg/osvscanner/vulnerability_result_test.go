package osvscanner

import (
	"github.com/datadog/datadog-sbom-generator/pkg/lockfile"
	"github.com/datadog/datadog-sbom-generator/pkg/models"
	"github.com/datadog/datadog-sbom-generator/pkg/reporter"
	"reflect"
	"testing"
)

func Test_packageHasRangedVersion(t *testing.T) {
	t.Parallel()
	type args struct {
		pkg            scannedPackage
		expectedResult bool
	}
	tests := []struct {
		name string
		args args
	}{{
		name: "no ranged version",
		args: args{
			pkg: scannedPackage{
				Version: "1.0.0",
			},
			expectedResult: false,
		},
	},
		{
			name: "contains <",
			args: args{
				pkg: scannedPackage{
					Version: "<=0.27.6",
				},
				expectedResult: true,
			},
		},
		{
			name: "contains >",
			args: args{
				pkg: scannedPackage{
					Version: ">=0.27.6",
				},
				expectedResult: true,
			},
		},
		{
			name: "contains all",
			args: args{
				pkg: scannedPackage{
					Version: ">=0.15.0,<0.16.0",
				},
				expectedResult: true,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			got := packageHasRangedVersion(tt.args.pkg)
			if got != tt.args.expectedResult {
				t.Errorf("packageHasRangedVersion() got = %v, want %v for %v", got, tt.args.expectedResult, tt.args.pkg)
			}
		})
	}
}

func Test_groupBySource_filterPackagesWithRangedVersions(t *testing.T) {
	t.Parallel()
	packagesWithRangedVersions := []scannedPackage{
		{
			Name:      "pkg-1",
			Ecosystem: lockfile.Ecosystem("npm"),
			Version:   ">=1.0.0",
			BlockLocation: models.FilePosition{
				Line:     models.Position{Start: 1, End: 1},
				Column:   models.Position{Start: 1, End: 1},
				Filename: "dir/package-lock.json",
			},
			Source: models.SourceInfo{
				Path: "dir/package-lock.json",
				Type: "lockfile",
			},
		},
		{
			Name:      "pkg-2",
			Ecosystem: lockfile.Ecosystem("npm"),
			Version:   "<=1.0.0",
			BlockLocation: models.FilePosition{
				Line:     models.Position{Start: 1, End: 1},
				Column:   models.Position{Start: 1, End: 1},
				Filename: "dir/package-lock.json",
			},
			Source: models.SourceInfo{
				Path: "dir/package-lock.json",
				Type: "lockfile",
			},
		},
	}
	emptyArtifacts := make([]models.ScannedArtifact, 0)
	emptyResult := models.VulnerabilityResults{
		Results:   []models.PackageSource{},
		Artifacts: emptyArtifacts,
	}

	got := groupBySource(&reporter.VoidReporter{}, packagesWithRangedVersions, emptyArtifacts)
	if !reflect.DeepEqual(got, emptyResult) {
		t.Errorf("groupBySource() not properly filtering ranged versions: got = %v, want %v", got, emptyResult)
	}
}
